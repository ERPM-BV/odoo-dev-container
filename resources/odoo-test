#!/usr/bin/env python3

# set server timezone in UTC before time module imported
__import__('os').environ['TZ'] = 'UTC'
# ignore E402, import not at top-level
import datetime  # noqa: E402
import os  # noqa: E402
import sys  # noqa: E402
import odoo  # noqa: E402

# get addons script
sys.path.append('/usr/local/bin')
get_modules = __import__('odoo-getaddons').get_modules


def run_command(function, args):
    args = ["'" + a.replace('"', '\"') + "'" for a in args]
    command = " ".join([function] + args)
    return os.system(command)


def create_database(dbname, modules=[], drop_first=True):
    print(f"TEST - Start {datetime.datetime.now().isoformat(' ')}")
    if drop_first:
        print(f"TEST - Drop database: {dbname}")
        run_command('click-odoo-dropdb', ["--if-exists", dbname])
    print(f"TEST - Initialize database: {dbname}")
    modules = ['base'] + [m for m in modules if m not in ('', 'base')]
    base_modules = ','.join(modules)
    if len(modules) > 1:
        print(f"TEST - Pre-install module: {base_modules}")
    run_command('click-odoo-initdb', [
        "--new-database", dbname, "--demo", "--no-cache", "-m", base_modules])


def main():
    args = sys.argv
    if len(args) < 3:
        print("Usage: odoo-test dbname module_path [ args ]")
        print("Runs odoo tests for all modules found in a path")
        print("Re-creates the database first with module BASE_MODULES")
        sys.exit(2)
        return
    dbname = args[1]
    addons = get_modules(args[2], depth=3)
    if not addons:
        print("TEST - No modules to test")
        sys.exit(1)
        return
    # create db with base modules
    modules = (os.environ.get('BASE_MODULES') or '').split(',')
    create_database(dbname, modules)
    # update arguments and run odoo
    args = (
        ["odoo", "--test-enable", "--stop-after-init"] + args[3:]
        + ["-i", ','.join(addons), "-d", dbname]
    )
    sys.argv = args
    print(f"TEST - Testing modules: {','.join(addons)}")
    print(' '.join(args))
    odoo.cli.main()


if __name__ == "__main__":
    main()
